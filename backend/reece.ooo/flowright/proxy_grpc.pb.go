// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proxy.proto

package flowright

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProxyInfo, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	CreateOrUpdateRoute(ctx context.Context, in *RoutingMap, opts ...grpc.CallOption) (*RoutingRule, error)
	CreateEnvironment(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (*EnvironmentCreateResponse, error)
	// TODO
	DeleteEnvironment(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*EnvironmentDeleteResponse, error)
	ListEnvironments(ctx context.Context, in *EnvironmentListRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProxyInfo, error) {
	out := new(ProxyInfo)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateOrUpdateRoute(ctx context.Context, in *RoutingMap, opts ...grpc.CallOption) (*RoutingRule, error) {
	out := new(RoutingRule)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/CreateOrUpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateEnvironment(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (*EnvironmentCreateResponse, error) {
	out := new(EnvironmentCreateResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteEnvironment(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*EnvironmentDeleteResponse, error) {
	out := new(EnvironmentDeleteResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ListEnvironments(ctx context.Context, in *EnvironmentListRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, "/proxy.Proxy/ListEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	GetInfo(context.Context, *Empty) (*ProxyInfo, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	CreateOrUpdateRoute(context.Context, *RoutingMap) (*RoutingRule, error)
	CreateEnvironment(context.Context, *EnvironmentCreateRequest) (*EnvironmentCreateResponse, error)
	// TODO
	DeleteEnvironment(context.Context, *EnvironmentDeleteRequest) (*EnvironmentDeleteResponse, error)
	ListEnvironments(context.Context, *EnvironmentListRequest) (*EnvironmentListResponse, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) GetInfo(context.Context, *Empty) (*ProxyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedProxyServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedProxyServer) CreateOrUpdateRoute(context.Context, *RoutingMap) (*RoutingRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateRoute not implemented")
}
func (UnimplementedProxyServer) CreateEnvironment(context.Context, *EnvironmentCreateRequest) (*EnvironmentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedProxyServer) DeleteEnvironment(context.Context, *EnvironmentDeleteRequest) (*EnvironmentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedProxyServer) ListEnvironments(context.Context, *EnvironmentListRequest) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironments not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateOrUpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateOrUpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/CreateOrUpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateOrUpdateRoute(ctx, req.(*RoutingMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateEnvironment(ctx, req.(*EnvironmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteEnvironment(ctx, req.(*EnvironmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ListEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ListEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ListEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ListEnvironments(ctx, req.(*EnvironmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Proxy_GetInfo_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Proxy_Heartbeat_Handler,
		},
		{
			MethodName: "CreateOrUpdateRoute",
			Handler:    _Proxy_CreateOrUpdateRoute_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _Proxy_CreateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _Proxy_DeleteEnvironment_Handler,
		},
		{
			MethodName: "ListEnvironments",
			Handler:    _Proxy_ListEnvironments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}
